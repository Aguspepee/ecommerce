const fs = require('fs')

class Product {
    constructor({ id, title, description, price, thumbnails, code, stock, category, status, ...props }) {
        this.id = id
        this.title = title
        this.description = description
        this.price = price
        this.thumbnails = thumbnails
        this.code = code
        this.stock = stock
        this.category = category
        this.status = status
    }

    getData = () => {
        return ({
            id: this.id,
            title: this.title,
            description: this.description,
            price: this.price,
            thumbnails: this.thumbnails,
            code: this.code,
            stock: this.stock,
            category: this.category,
            status: this.status
        })
    }
}

module.exports = class ProductManager {
    constructor(path) {
        //Setea el path
        this.path = path

        //Obtiene los productos
        let products = fs.readFileSync(this.path)
        products = JSON.parse(products)

        //Fija el ID como el mayor nÃºmero de todos los ID +1
        this.id = +products.reduce((acc, val) => {
            return acc > val.id ? acc : val.id;
        }, 0) + 1
    }

    //Return all products
    getProducts = () => {
        let products = fs.readFileSync(this.path)
        return JSON.parse(products)
    }

    addProduct = ({ title, description, price, thumbnails, category, code, stock, status, ...props }) => {
        let products = this.getProducts()
        //Verify if code is duplicated and all fields exists
        if (products.some((x) => x.code === code) || !title || !description || !price || !category || !code || !stock) {

            //Duplicated code field
            !products.some((x) => x.code === code) || console.log(`Duplicated key ERROR: code ${code} is duplicated`)

            //Required fields
            title || console.log(`Validation ERROR: title is required`)
            description || console.log(`Validation ERROR: description is required`)
            price || console.log(`Validation ERROR: price is required`)
            category || console.log(`Validation ERROR: category is required`)
            code || console.log(`Validation ERROR: code is required`)
            stock || console.log(`Validation ERROR: stock is required`)

        } else {
            console.log(status)
            //New product instance
            const product = new Product({
                id: this.id, //use the autogenerated id 
                title: title,
                description: description,
                price: price,
                thumbnails: thumbnails,
                category: category,
                code: code,
                stock: stock,
                status: status === undefined ? true : status
            })
            products.push(product.getData())



            //Save the file
            fs.writeFileSync(this.path, JSON.stringify(products))

            //Add 1 to the id
            ++this.id

            return products
        }
    }

    getProductById = (id) => {
        const products = this.getProducts()
        const product = products.filter((product) => product.id === id)

        //If the product exists return the product
        return product.toString() === "" ? "Not found" : product
    }

    deleteProduct = (id) => {
        console.log(id)
        const products = this.getProducts()
        const index = products.findIndex((product) => product.id === Number(id))
        if (index > -1) {
            products.splice(index, 1);
            //Save the file
            fs.writeFileSync(this.path, JSON.stringify(products))
            return products
        } else {
            return ("Couldn't delete, product not found")
        }
    }

    updateProduct = ({ id, title, description, price, thumbnails, code, stock, category, ...props }) => {
        const products = this.getProducts()
        console.log(products)
        console.log("llego")
        //Verify if code is duplicated and all fields exists
        if (products.some((x) => x.code === code) || !title || !description || !price || !thumbnails || !code || !stock) {

            //Duplicated code field
            !products.some((x) => x.code === code) || console.log(`Duplicated key ERROR: code ${code} is duplicated`)

            //Required fields
            id || console.log(`Validation ERROR: ID is required`)

        } else {

            const index = products.findIndex((product) => product.id === Number(id))

            //New product instance
            products[index].title = title || products[index].title
            products[index].description = description || products[index].description
            products[index].price = price || products[index].price
            products[index].thumbnails = thumbnails || products[index].thumbnailsW
            products[index].stock = stock || products[index].stock
            products[index].category = category || products[index].category
            console.log("llego")
            //Save the file
            fs.writeFileSync(this.path, JSON.stringify(products))
            return (products)
        }
    }
}
